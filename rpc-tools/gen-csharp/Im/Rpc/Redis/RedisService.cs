/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Im.Rpc.Redis
{
  public partial class RedisService {
    public interface Iface {
      bool SetUnreadNumber(string userid, int count);
      #if SILVERLIGHT
      IAsyncResult Begin_SetUnreadNumber(AsyncCallback callback, object state, string userid, int count);
      bool End_SetUnreadNumber(IAsyncResult asyncResult);
      #endif
      bool FriendGroupIns(string friendgroup);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendGroupIns(AsyncCallback callback, object state, string friendgroup);
      bool End_FriendGroupIns(IAsyncResult asyncResult);
      #endif
      bool FriendGroupUpd(string friendgroup);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendGroupUpd(AsyncCallback callback, object state, string friendgroup);
      bool End_FriendGroupUpd(IAsyncResult asyncResult);
      #endif
      bool FriendGroupDel(string friendgroup);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendGroupDel(AsyncCallback callback, object state, string friendgroup);
      bool End_FriendGroupDel(IAsyncResult asyncResult);
      #endif
      string GetFriendGroupList(string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFriendGroupList(AsyncCallback callback, object state, string userid);
      string End_GetFriendGroupList(IAsyncResult asyncResult);
      #endif
      bool FriendRelationIns(string friendrelation);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendRelationIns(AsyncCallback callback, object state, string friendrelation);
      bool End_FriendRelationIns(IAsyncResult asyncResult);
      #endif
      bool FriendRelationUpd(string friendrelation);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendRelationUpd(AsyncCallback callback, object state, string friendrelation);
      bool End_FriendRelationUpd(IAsyncResult asyncResult);
      #endif
      bool FriendRelationDel(string friendrelation);
      #if SILVERLIGHT
      IAsyncResult Begin_FriendRelationDel(AsyncCallback callback, object state, string friendrelation);
      bool End_FriendRelationDel(IAsyncResult asyncResult);
      #endif
      string GetFriendRelationList(string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFriendRelationList(AsyncCallback callback, object state, string userid);
      string End_GetFriendRelationList(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_SetUnreadNumber(AsyncCallback callback, object state, string userid, int count)
      {
        return send_SetUnreadNumber(callback, state, userid, count);
      }

      public bool End_SetUnreadNumber(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_SetUnreadNumber();
      }

      #endif

      public bool SetUnreadNumber(string userid, int count)
      {
        #if !SILVERLIGHT
        send_SetUnreadNumber(userid, count);
        return recv_SetUnreadNumber();

        #else
        var asyncResult = Begin_SetUnreadNumber(null, null, userid, count);
        return End_SetUnreadNumber(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_SetUnreadNumber(AsyncCallback callback, object state, string userid, int count)
      #else
      public void send_SetUnreadNumber(string userid, int count)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("SetUnreadNumber", TMessageType.Call, seqid_));
        SetUnreadNumber_args args = new SetUnreadNumber_args();
        args.Userid = userid;
        args.Count = count;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_SetUnreadNumber()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        SetUnreadNumber_result result = new SetUnreadNumber_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetUnreadNumber failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendGroupIns(AsyncCallback callback, object state, string friendgroup)
      {
        return send_FriendGroupIns(callback, state, friendgroup);
      }

      public bool End_FriendGroupIns(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendGroupIns();
      }

      #endif

      public bool FriendGroupIns(string friendgroup)
      {
        #if !SILVERLIGHT
        send_FriendGroupIns(friendgroup);
        return recv_FriendGroupIns();

        #else
        var asyncResult = Begin_FriendGroupIns(null, null, friendgroup);
        return End_FriendGroupIns(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendGroupIns(AsyncCallback callback, object state, string friendgroup)
      #else
      public void send_FriendGroupIns(string friendgroup)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendGroupIns", TMessageType.Call, seqid_));
        FriendGroupIns_args args = new FriendGroupIns_args();
        args.Friendgroup = friendgroup;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_FriendGroupIns()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendGroupIns_result result = new FriendGroupIns_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendGroupIns failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendGroupUpd(AsyncCallback callback, object state, string friendgroup)
      {
        return send_FriendGroupUpd(callback, state, friendgroup);
      }

      public bool End_FriendGroupUpd(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendGroupUpd();
      }

      #endif

      public bool FriendGroupUpd(string friendgroup)
      {
        #if !SILVERLIGHT
        send_FriendGroupUpd(friendgroup);
        return recv_FriendGroupUpd();

        #else
        var asyncResult = Begin_FriendGroupUpd(null, null, friendgroup);
        return End_FriendGroupUpd(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendGroupUpd(AsyncCallback callback, object state, string friendgroup)
      #else
      public void send_FriendGroupUpd(string friendgroup)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendGroupUpd", TMessageType.Call, seqid_));
        FriendGroupUpd_args args = new FriendGroupUpd_args();
        args.Friendgroup = friendgroup;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_FriendGroupUpd()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendGroupUpd_result result = new FriendGroupUpd_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendGroupUpd failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendGroupDel(AsyncCallback callback, object state, string friendgroup)
      {
        return send_FriendGroupDel(callback, state, friendgroup);
      }

      public bool End_FriendGroupDel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendGroupDel();
      }

      #endif

      public bool FriendGroupDel(string friendgroup)
      {
        #if !SILVERLIGHT
        send_FriendGroupDel(friendgroup);
        return recv_FriendGroupDel();

        #else
        var asyncResult = Begin_FriendGroupDel(null, null, friendgroup);
        return End_FriendGroupDel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendGroupDel(AsyncCallback callback, object state, string friendgroup)
      #else
      public void send_FriendGroupDel(string friendgroup)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendGroupDel", TMessageType.Call, seqid_));
        FriendGroupDel_args args = new FriendGroupDel_args();
        args.Friendgroup = friendgroup;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_FriendGroupDel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendGroupDel_result result = new FriendGroupDel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendGroupDel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFriendGroupList(AsyncCallback callback, object state, string userid)
      {
        return send_GetFriendGroupList(callback, state, userid);
      }

      public string End_GetFriendGroupList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFriendGroupList();
      }

      #endif

      public string GetFriendGroupList(string userid)
      {
        #if !SILVERLIGHT
        send_GetFriendGroupList(userid);
        return recv_GetFriendGroupList();

        #else
        var asyncResult = Begin_GetFriendGroupList(null, null, userid);
        return End_GetFriendGroupList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFriendGroupList(AsyncCallback callback, object state, string userid)
      #else
      public void send_GetFriendGroupList(string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFriendGroupList", TMessageType.Call, seqid_));
        GetFriendGroupList_args args = new GetFriendGroupList_args();
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetFriendGroupList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFriendGroupList_result result = new GetFriendGroupList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFriendGroupList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendRelationIns(AsyncCallback callback, object state, string friendrelation)
      {
        return send_FriendRelationIns(callback, state, friendrelation);
      }

      public bool End_FriendRelationIns(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendRelationIns();
      }

      #endif

      public bool FriendRelationIns(string friendrelation)
      {
        #if !SILVERLIGHT
        send_FriendRelationIns(friendrelation);
        return recv_FriendRelationIns();

        #else
        var asyncResult = Begin_FriendRelationIns(null, null, friendrelation);
        return End_FriendRelationIns(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendRelationIns(AsyncCallback callback, object state, string friendrelation)
      #else
      public void send_FriendRelationIns(string friendrelation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendRelationIns", TMessageType.Call, seqid_));
        FriendRelationIns_args args = new FriendRelationIns_args();
        args.Friendrelation = friendrelation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_FriendRelationIns()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendRelationIns_result result = new FriendRelationIns_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendRelationIns failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendRelationUpd(AsyncCallback callback, object state, string friendrelation)
      {
        return send_FriendRelationUpd(callback, state, friendrelation);
      }

      public bool End_FriendRelationUpd(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendRelationUpd();
      }

      #endif

      public bool FriendRelationUpd(string friendrelation)
      {
        #if !SILVERLIGHT
        send_FriendRelationUpd(friendrelation);
        return recv_FriendRelationUpd();

        #else
        var asyncResult = Begin_FriendRelationUpd(null, null, friendrelation);
        return End_FriendRelationUpd(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendRelationUpd(AsyncCallback callback, object state, string friendrelation)
      #else
      public void send_FriendRelationUpd(string friendrelation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendRelationUpd", TMessageType.Call, seqid_));
        FriendRelationUpd_args args = new FriendRelationUpd_args();
        args.Friendrelation = friendrelation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_FriendRelationUpd()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendRelationUpd_result result = new FriendRelationUpd_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendRelationUpd failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_FriendRelationDel(AsyncCallback callback, object state, string friendrelation)
      {
        return send_FriendRelationDel(callback, state, friendrelation);
      }

      public bool End_FriendRelationDel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FriendRelationDel();
      }

      #endif

      public bool FriendRelationDel(string friendrelation)
      {
        #if !SILVERLIGHT
        send_FriendRelationDel(friendrelation);
        return recv_FriendRelationDel();

        #else
        var asyncResult = Begin_FriendRelationDel(null, null, friendrelation);
        return End_FriendRelationDel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FriendRelationDel(AsyncCallback callback, object state, string friendrelation)
      #else
      public void send_FriendRelationDel(string friendrelation)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FriendRelationDel", TMessageType.Call, seqid_));
        FriendRelationDel_args args = new FriendRelationDel_args();
        args.Friendrelation = friendrelation;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_FriendRelationDel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FriendRelationDel_result result = new FriendRelationDel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FriendRelationDel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFriendRelationList(AsyncCallback callback, object state, string userid)
      {
        return send_GetFriendRelationList(callback, state, userid);
      }

      public string End_GetFriendRelationList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFriendRelationList();
      }

      #endif

      public string GetFriendRelationList(string userid)
      {
        #if !SILVERLIGHT
        send_GetFriendRelationList(userid);
        return recv_GetFriendRelationList();

        #else
        var asyncResult = Begin_GetFriendRelationList(null, null, userid);
        return End_GetFriendRelationList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFriendRelationList(AsyncCallback callback, object state, string userid)
      #else
      public void send_GetFriendRelationList(string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFriendRelationList", TMessageType.Call, seqid_));
        GetFriendRelationList_args args = new GetFriendRelationList_args();
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetFriendRelationList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFriendRelationList_result result = new GetFriendRelationList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFriendRelationList failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["SetUnreadNumber"] = SetUnreadNumber_Process;
        processMap_["FriendGroupIns"] = FriendGroupIns_Process;
        processMap_["FriendGroupUpd"] = FriendGroupUpd_Process;
        processMap_["FriendGroupDel"] = FriendGroupDel_Process;
        processMap_["GetFriendGroupList"] = GetFriendGroupList_Process;
        processMap_["FriendRelationIns"] = FriendRelationIns_Process;
        processMap_["FriendRelationUpd"] = FriendRelationUpd_Process;
        processMap_["FriendRelationDel"] = FriendRelationDel_Process;
        processMap_["GetFriendRelationList"] = GetFriendRelationList_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void SetUnreadNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        SetUnreadNumber_args args = new SetUnreadNumber_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        SetUnreadNumber_result result = new SetUnreadNumber_result();
        result.Success = iface_.SetUnreadNumber(args.Userid, args.Count);
        oprot.WriteMessageBegin(new TMessage("SetUnreadNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendGroupIns_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendGroupIns_args args = new FriendGroupIns_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendGroupIns_result result = new FriendGroupIns_result();
        result.Success = iface_.FriendGroupIns(args.Friendgroup);
        oprot.WriteMessageBegin(new TMessage("FriendGroupIns", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendGroupUpd_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendGroupUpd_args args = new FriendGroupUpd_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendGroupUpd_result result = new FriendGroupUpd_result();
        result.Success = iface_.FriendGroupUpd(args.Friendgroup);
        oprot.WriteMessageBegin(new TMessage("FriendGroupUpd", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendGroupDel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendGroupDel_args args = new FriendGroupDel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendGroupDel_result result = new FriendGroupDel_result();
        result.Success = iface_.FriendGroupDel(args.Friendgroup);
        oprot.WriteMessageBegin(new TMessage("FriendGroupDel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFriendGroupList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFriendGroupList_args args = new GetFriendGroupList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFriendGroupList_result result = new GetFriendGroupList_result();
        result.Success = iface_.GetFriendGroupList(args.Userid);
        oprot.WriteMessageBegin(new TMessage("GetFriendGroupList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendRelationIns_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendRelationIns_args args = new FriendRelationIns_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendRelationIns_result result = new FriendRelationIns_result();
        result.Success = iface_.FriendRelationIns(args.Friendrelation);
        oprot.WriteMessageBegin(new TMessage("FriendRelationIns", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendRelationUpd_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendRelationUpd_args args = new FriendRelationUpd_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendRelationUpd_result result = new FriendRelationUpd_result();
        result.Success = iface_.FriendRelationUpd(args.Friendrelation);
        oprot.WriteMessageBegin(new TMessage("FriendRelationUpd", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void FriendRelationDel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FriendRelationDel_args args = new FriendRelationDel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FriendRelationDel_result result = new FriendRelationDel_result();
        result.Success = iface_.FriendRelationDel(args.Friendrelation);
        oprot.WriteMessageBegin(new TMessage("FriendRelationDel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFriendRelationList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFriendRelationList_args args = new GetFriendRelationList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFriendRelationList_result result = new GetFriendRelationList_result();
        result.Success = iface_.GetFriendRelationList(args.Userid);
        oprot.WriteMessageBegin(new TMessage("GetFriendRelationList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetUnreadNumber_args : TBase
    {
      private string _userid;
      private int _count;

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userid;
        public bool count;
      }

      public SetUnreadNumber_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Userid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  Count = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetUnreadNumber_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Userid != null && __isset.userid) {
            field.Name = "userid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Userid);
            oprot.WriteFieldEnd();
          }
          if (__isset.count) {
            field.Name = "count";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Count);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetUnreadNumber_args(");
        bool __first = true;
        if (Userid != null && __isset.userid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userid: ");
          __sb.Append(Userid);
        }
        if (__isset.count) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Count: ");
          __sb.Append(Count);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class SetUnreadNumber_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public SetUnreadNumber_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("SetUnreadNumber_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("SetUnreadNumber_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendGroupIns_args : TBase
    {
      private string _friendgroup;

      public string Friendgroup
      {
        get
        {
          return _friendgroup;
        }
        set
        {
          __isset.friendgroup = true;
          this._friendgroup = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendgroup;
      }

      public FriendGroupIns_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Friendgroup = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendGroupIns_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Friendgroup != null && __isset.friendgroup) {
            field.Name = "friendgroup";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Friendgroup);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendGroupIns_args(");
        bool __first = true;
        if (Friendgroup != null && __isset.friendgroup) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Friendgroup: ");
          __sb.Append(Friendgroup);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendGroupIns_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FriendGroupIns_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendGroupIns_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendGroupIns_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendGroupUpd_args : TBase
    {
      private string _friendgroup;

      public string Friendgroup
      {
        get
        {
          return _friendgroup;
        }
        set
        {
          __isset.friendgroup = true;
          this._friendgroup = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendgroup;
      }

      public FriendGroupUpd_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Friendgroup = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendGroupUpd_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Friendgroup != null && __isset.friendgroup) {
            field.Name = "friendgroup";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Friendgroup);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendGroupUpd_args(");
        bool __first = true;
        if (Friendgroup != null && __isset.friendgroup) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Friendgroup: ");
          __sb.Append(Friendgroup);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendGroupUpd_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FriendGroupUpd_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendGroupUpd_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendGroupUpd_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendGroupDel_args : TBase
    {
      private string _friendgroup;

      public string Friendgroup
      {
        get
        {
          return _friendgroup;
        }
        set
        {
          __isset.friendgroup = true;
          this._friendgroup = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendgroup;
      }

      public FriendGroupDel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Friendgroup = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendGroupDel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Friendgroup != null && __isset.friendgroup) {
            field.Name = "friendgroup";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Friendgroup);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendGroupDel_args(");
        bool __first = true;
        if (Friendgroup != null && __isset.friendgroup) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Friendgroup: ");
          __sb.Append(Friendgroup);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendGroupDel_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FriendGroupDel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendGroupDel_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendGroupDel_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendGroupList_args : TBase
    {
      private string _userid;

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userid;
      }

      public GetFriendGroupList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Userid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendGroupList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Userid != null && __isset.userid) {
            field.Name = "userid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Userid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendGroupList_args(");
        bool __first = true;
        if (Userid != null && __isset.userid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userid: ");
          __sb.Append(Userid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendGroupList_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFriendGroupList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendGroupList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendGroupList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRelationIns_args : TBase
    {
      private string _friendrelation;

      public string Friendrelation
      {
        get
        {
          return _friendrelation;
        }
        set
        {
          __isset.friendrelation = true;
          this._friendrelation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendrelation;
      }

      public FriendRelationIns_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Friendrelation = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendRelationIns_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Friendrelation != null && __isset.friendrelation) {
            field.Name = "friendrelation";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Friendrelation);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRelationIns_args(");
        bool __first = true;
        if (Friendrelation != null && __isset.friendrelation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Friendrelation: ");
          __sb.Append(Friendrelation);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRelationIns_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FriendRelationIns_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendRelationIns_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRelationIns_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRelationUpd_args : TBase
    {
      private string _friendrelation;

      public string Friendrelation
      {
        get
        {
          return _friendrelation;
        }
        set
        {
          __isset.friendrelation = true;
          this._friendrelation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendrelation;
      }

      public FriendRelationUpd_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Friendrelation = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendRelationUpd_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Friendrelation != null && __isset.friendrelation) {
            field.Name = "friendrelation";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Friendrelation);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRelationUpd_args(");
        bool __first = true;
        if (Friendrelation != null && __isset.friendrelation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Friendrelation: ");
          __sb.Append(Friendrelation);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRelationUpd_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FriendRelationUpd_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendRelationUpd_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRelationUpd_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRelationDel_args : TBase
    {
      private string _friendrelation;

      public string Friendrelation
      {
        get
        {
          return _friendrelation;
        }
        set
        {
          __isset.friendrelation = true;
          this._friendrelation = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool friendrelation;
      }

      public FriendRelationDel_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Friendrelation = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendRelationDel_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Friendrelation != null && __isset.friendrelation) {
            field.Name = "friendrelation";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Friendrelation);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRelationDel_args(");
        bool __first = true;
        if (Friendrelation != null && __isset.friendrelation) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Friendrelation: ");
          __sb.Append(Friendrelation);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FriendRelationDel_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FriendRelationDel_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FriendRelationDel_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FriendRelationDel_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendRelationList_args : TBase
    {
      private string _userid;

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userid;
      }

      public GetFriendRelationList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Userid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendRelationList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Userid != null && __isset.userid) {
            field.Name = "userid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Userid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendRelationList_args(");
        bool __first = true;
        if (Userid != null && __isset.userid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userid: ");
          __sb.Append(Userid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendRelationList_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFriendRelationList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendRelationList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendRelationList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
