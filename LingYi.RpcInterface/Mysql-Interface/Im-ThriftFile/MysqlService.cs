/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Im.Rpc.Mysql
{
  public partial class MysqlService {
    public interface Iface {
      bool FileInsert(string filemanager);
      #if SILVERLIGHT
      IAsyncResult Begin_FileInsert(AsyncCallback callback, object state, string filemanager);
      bool End_FileInsert(IAsyncResult asyncResult);
      #endif
      string GetFileByID(string fileid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFileByID(AsyncCallback callback, object state, string fileid);
      string End_GetFileByID(IAsyncResult asyncResult);
      #endif
      bool MessageInsert(string message);
      #if SILVERLIGHT
      IAsyncResult Begin_MessageInsert(AsyncCallback callback, object state, string message);
      bool End_MessageInsert(IAsyncResult asyncResult);
      #endif
      List<string> GetChatRecords(string fromid, string toid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetChatRecords(AsyncCallback callback, object state, string fromid, string toid);
      List<string> End_GetChatRecords(IAsyncResult asyncResult);
      #endif
      string GetFriendGroupList(string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFriendGroupList(AsyncCallback callback, object state, string userid);
      string End_GetFriendGroupList(IAsyncResult asyncResult);
      #endif
      string GetFriendRelationList(string userid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetFriendRelationList(AsyncCallback callback, object state, string userid);
      string End_GetFriendRelationList(IAsyncResult asyncResult);
      #endif
      string GetGroupMembers(string groupid);
      #if SILVERLIGHT
      IAsyncResult Begin_GetGroupMembers(AsyncCallback callback, object state, string groupid);
      string End_GetGroupMembers(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_FileInsert(AsyncCallback callback, object state, string filemanager)
      {
        return send_FileInsert(callback, state, filemanager);
      }

      public bool End_FileInsert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_FileInsert();
      }

      #endif

      public bool FileInsert(string filemanager)
      {
        #if !SILVERLIGHT
        send_FileInsert(filemanager);
        return recv_FileInsert();

        #else
        var asyncResult = Begin_FileInsert(null, null, filemanager);
        return End_FileInsert(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_FileInsert(AsyncCallback callback, object state, string filemanager)
      #else
      public void send_FileInsert(string filemanager)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("FileInsert", TMessageType.Call, seqid_));
        FileInsert_args args = new FileInsert_args();
        args.Filemanager = filemanager;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_FileInsert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        FileInsert_result result = new FileInsert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FileInsert failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFileByID(AsyncCallback callback, object state, string fileid)
      {
        return send_GetFileByID(callback, state, fileid);
      }

      public string End_GetFileByID(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFileByID();
      }

      #endif

      public string GetFileByID(string fileid)
      {
        #if !SILVERLIGHT
        send_GetFileByID(fileid);
        return recv_GetFileByID();

        #else
        var asyncResult = Begin_GetFileByID(null, null, fileid);
        return End_GetFileByID(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFileByID(AsyncCallback callback, object state, string fileid)
      #else
      public void send_GetFileByID(string fileid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFileByID", TMessageType.Call, seqid_));
        GetFileByID_args args = new GetFileByID_args();
        args.Fileid = fileid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetFileByID()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFileByID_result result = new GetFileByID_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFileByID failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MessageInsert(AsyncCallback callback, object state, string message)
      {
        return send_MessageInsert(callback, state, message);
      }

      public bool End_MessageInsert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_MessageInsert();
      }

      #endif

      public bool MessageInsert(string message)
      {
        #if !SILVERLIGHT
        send_MessageInsert(message);
        return recv_MessageInsert();

        #else
        var asyncResult = Begin_MessageInsert(null, null, message);
        return End_MessageInsert(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MessageInsert(AsyncCallback callback, object state, string message)
      #else
      public void send_MessageInsert(string message)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MessageInsert", TMessageType.Call, seqid_));
        MessageInsert_args args = new MessageInsert_args();
        args.Message = message;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_MessageInsert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MessageInsert_result result = new MessageInsert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "MessageInsert failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetChatRecords(AsyncCallback callback, object state, string fromid, string toid)
      {
        return send_GetChatRecords(callback, state, fromid, toid);
      }

      public List<string> End_GetChatRecords(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetChatRecords();
      }

      #endif

      public List<string> GetChatRecords(string fromid, string toid)
      {
        #if !SILVERLIGHT
        send_GetChatRecords(fromid, toid);
        return recv_GetChatRecords();

        #else
        var asyncResult = Begin_GetChatRecords(null, null, fromid, toid);
        return End_GetChatRecords(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetChatRecords(AsyncCallback callback, object state, string fromid, string toid)
      #else
      public void send_GetChatRecords(string fromid, string toid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetChatRecords", TMessageType.Call, seqid_));
        GetChatRecords_args args = new GetChatRecords_args();
        args.Fromid = fromid;
        args.Toid = toid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_GetChatRecords()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetChatRecords_result result = new GetChatRecords_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetChatRecords failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFriendGroupList(AsyncCallback callback, object state, string userid)
      {
        return send_GetFriendGroupList(callback, state, userid);
      }

      public string End_GetFriendGroupList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFriendGroupList();
      }

      #endif

      public string GetFriendGroupList(string userid)
      {
        #if !SILVERLIGHT
        send_GetFriendGroupList(userid);
        return recv_GetFriendGroupList();

        #else
        var asyncResult = Begin_GetFriendGroupList(null, null, userid);
        return End_GetFriendGroupList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFriendGroupList(AsyncCallback callback, object state, string userid)
      #else
      public void send_GetFriendGroupList(string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFriendGroupList", TMessageType.Call, seqid_));
        GetFriendGroupList_args args = new GetFriendGroupList_args();
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetFriendGroupList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFriendGroupList_result result = new GetFriendGroupList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFriendGroupList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetFriendRelationList(AsyncCallback callback, object state, string userid)
      {
        return send_GetFriendRelationList(callback, state, userid);
      }

      public string End_GetFriendRelationList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetFriendRelationList();
      }

      #endif

      public string GetFriendRelationList(string userid)
      {
        #if !SILVERLIGHT
        send_GetFriendRelationList(userid);
        return recv_GetFriendRelationList();

        #else
        var asyncResult = Begin_GetFriendRelationList(null, null, userid);
        return End_GetFriendRelationList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetFriendRelationList(AsyncCallback callback, object state, string userid)
      #else
      public void send_GetFriendRelationList(string userid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetFriendRelationList", TMessageType.Call, seqid_));
        GetFriendRelationList_args args = new GetFriendRelationList_args();
        args.Userid = userid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetFriendRelationList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetFriendRelationList_result result = new GetFriendRelationList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFriendRelationList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetGroupMembers(AsyncCallback callback, object state, string groupid)
      {
        return send_GetGroupMembers(callback, state, groupid);
      }

      public string End_GetGroupMembers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetGroupMembers();
      }

      #endif

      public string GetGroupMembers(string groupid)
      {
        #if !SILVERLIGHT
        send_GetGroupMembers(groupid);
        return recv_GetGroupMembers();

        #else
        var asyncResult = Begin_GetGroupMembers(null, null, groupid);
        return End_GetGroupMembers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetGroupMembers(AsyncCallback callback, object state, string groupid)
      #else
      public void send_GetGroupMembers(string groupid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetGroupMembers", TMessageType.Call, seqid_));
        GetGroupMembers_args args = new GetGroupMembers_args();
        args.Groupid = groupid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetGroupMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetGroupMembers_result result = new GetGroupMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetGroupMembers failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["FileInsert"] = FileInsert_Process;
        processMap_["GetFileByID"] = GetFileByID_Process;
        processMap_["MessageInsert"] = MessageInsert_Process;
        processMap_["GetChatRecords"] = GetChatRecords_Process;
        processMap_["GetFriendGroupList"] = GetFriendGroupList_Process;
        processMap_["GetFriendRelationList"] = GetFriendRelationList_Process;
        processMap_["GetGroupMembers"] = GetGroupMembers_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void FileInsert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        FileInsert_args args = new FileInsert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        FileInsert_result result = new FileInsert_result();
        result.Success = iface_.FileInsert(args.Filemanager);
        oprot.WriteMessageBegin(new TMessage("FileInsert", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFileByID_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFileByID_args args = new GetFileByID_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFileByID_result result = new GetFileByID_result();
        result.Success = iface_.GetFileByID(args.Fileid);
        oprot.WriteMessageBegin(new TMessage("GetFileByID", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MessageInsert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MessageInsert_args args = new MessageInsert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MessageInsert_result result = new MessageInsert_result();
        result.Success = iface_.MessageInsert(args.Message);
        oprot.WriteMessageBegin(new TMessage("MessageInsert", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetChatRecords_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetChatRecords_args args = new GetChatRecords_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetChatRecords_result result = new GetChatRecords_result();
        result.Success = iface_.GetChatRecords(args.Fromid, args.Toid);
        oprot.WriteMessageBegin(new TMessage("GetChatRecords", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFriendGroupList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFriendGroupList_args args = new GetFriendGroupList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFriendGroupList_result result = new GetFriendGroupList_result();
        result.Success = iface_.GetFriendGroupList(args.Userid);
        oprot.WriteMessageBegin(new TMessage("GetFriendGroupList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetFriendRelationList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetFriendRelationList_args args = new GetFriendRelationList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetFriendRelationList_result result = new GetFriendRelationList_result();
        result.Success = iface_.GetFriendRelationList(args.Userid);
        oprot.WriteMessageBegin(new TMessage("GetFriendRelationList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetGroupMembers_args args = new GetGroupMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetGroupMembers_result result = new GetGroupMembers_result();
        result.Success = iface_.GetGroupMembers(args.Groupid);
        oprot.WriteMessageBegin(new TMessage("GetGroupMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FileInsert_args : TBase
    {
      private string _filemanager;

      public string Filemanager
      {
        get
        {
          return _filemanager;
        }
        set
        {
          __isset.filemanager = true;
          this._filemanager = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool filemanager;
      }

      public FileInsert_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Filemanager = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FileInsert_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Filemanager != null && __isset.filemanager) {
            field.Name = "filemanager";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Filemanager);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FileInsert_args(");
        bool __first = true;
        if (Filemanager != null && __isset.filemanager) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Filemanager: ");
          __sb.Append(Filemanager);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class FileInsert_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public FileInsert_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("FileInsert_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("FileInsert_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFileByID_args : TBase
    {
      private string _fileid;

      public string Fileid
      {
        get
        {
          return _fileid;
        }
        set
        {
          __isset.fileid = true;
          this._fileid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fileid;
      }

      public GetFileByID_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Fileid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFileByID_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Fileid != null && __isset.fileid) {
            field.Name = "fileid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Fileid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFileByID_args(");
        bool __first = true;
        if (Fileid != null && __isset.fileid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Fileid: ");
          __sb.Append(Fileid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFileByID_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFileByID_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFileByID_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFileByID_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MessageInsert_args : TBase
    {
      private string _message;

      public string Message
      {
        get
        {
          return _message;
        }
        set
        {
          __isset.message = true;
          this._message = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool message;
      }

      public MessageInsert_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Message = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MessageInsert_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Message != null && __isset.message) {
            field.Name = "message";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Message);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MessageInsert_args(");
        bool __first = true;
        if (Message != null && __isset.message) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Message: ");
          __sb.Append(Message);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MessageInsert_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public MessageInsert_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("MessageInsert_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("MessageInsert_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetChatRecords_args : TBase
    {
      private string _fromid;
      private string _toid;

      public string Fromid
      {
        get
        {
          return _fromid;
        }
        set
        {
          __isset.fromid = true;
          this._fromid = value;
        }
      }

      public string Toid
      {
        get
        {
          return _toid;
        }
        set
        {
          __isset.toid = true;
          this._toid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool fromid;
        public bool toid;
      }

      public GetChatRecords_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Fromid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Toid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetChatRecords_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Fromid != null && __isset.fromid) {
            field.Name = "fromid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Fromid);
            oprot.WriteFieldEnd();
          }
          if (Toid != null && __isset.toid) {
            field.Name = "toid";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Toid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetChatRecords_args(");
        bool __first = true;
        if (Fromid != null && __isset.fromid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Fromid: ");
          __sb.Append(Fromid);
        }
        if (Toid != null && __isset.toid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Toid: ");
          __sb.Append(Toid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetChatRecords_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetChatRecords_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<string>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      string _elem2;
                      _elem2 = iprot.ReadString();
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetChatRecords_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.String, Success.Count));
                foreach (string _iter3 in Success)
                {
                  oprot.WriteString(_iter3);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetChatRecords_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendGroupList_args : TBase
    {
      private string _userid;

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userid;
      }

      public GetFriendGroupList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Userid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendGroupList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Userid != null && __isset.userid) {
            field.Name = "userid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Userid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendGroupList_args(");
        bool __first = true;
        if (Userid != null && __isset.userid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userid: ");
          __sb.Append(Userid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendGroupList_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFriendGroupList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendGroupList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendGroupList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendRelationList_args : TBase
    {
      private string _userid;

      public string Userid
      {
        get
        {
          return _userid;
        }
        set
        {
          __isset.userid = true;
          this._userid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool userid;
      }

      public GetFriendRelationList_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Userid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendRelationList_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Userid != null && __isset.userid) {
            field.Name = "userid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Userid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendRelationList_args(");
        bool __first = true;
        if (Userid != null && __isset.userid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Userid: ");
          __sb.Append(Userid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetFriendRelationList_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetFriendRelationList_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetFriendRelationList_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetFriendRelationList_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGroupMembers_args : TBase
    {
      private string _groupid;

      public string Groupid
      {
        get
        {
          return _groupid;
        }
        set
        {
          __isset.groupid = true;
          this._groupid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool groupid;
      }

      public GetGroupMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String) {
                  Groupid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGroupMembers_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Groupid != null && __isset.groupid) {
            field.Name = "groupid";
            field.Type = TType.String;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Groupid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGroupMembers_args(");
        bool __first = true;
        if (Groupid != null && __isset.groupid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Groupid: ");
          __sb.Append(Groupid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetGroupMembers_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetGroupMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("GetGroupMembers_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("GetGroupMembers_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
