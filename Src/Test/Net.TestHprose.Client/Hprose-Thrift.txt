作者：马秉尧
链接：https://www.zhihu.com/question/43720830/answer/135982229
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

thrift 和 hprose 的主要区别是：thrift 需要使用接口描述语言来写接口，之后生成服务器骨架和客户端调用代理，
通过这种方式，客户端和服务器端是紧耦合在一起的，你不能单独修改任何一端的接口（不是说服务器端代码的实现），
服务器和客户端传递的数据类型是严格匹配的。而 hprose 的服务器和客户端是独立的，不需要中间语言来编写接口，
服务器代码不需要基于生成的骨架来编写，而是可以直接把本地的函数和方法作为服务发布，而客户端可以根据自己的
需要来定义调用接口（而且这一步也是可选的），或者直接调用服务器端的函数或方法。服务器和客户端之间传递的数
据类型不需要严格匹配，只要是相容的就可以。因此，hprose 具有更高的灵活性，这种灵活性更类似于现在的那些打着 
REST 旗号实际上干着 RPC 事情的 Restful API，但是在使用上要比 Restful API 更方便。也就是说，hprose 既具有
传统 RPC 的易用性，同时又具有 Restful API 的灵活性。所以，hprose 比 thrift 更适合做微服务。其它方面的区别
就很难比较了。比如跨语言能力。thrift 和 hprose 都是跨语言的，从总的支持的语言和平台的数量来说，hprose 比 
thrift 要多一些。但是有一小部分语言，thrift 支持，hprose 目前不支持，或者 hprose 支持，thrift 目前不支持，
但如果以发展的眼光来看，现在不支持的语言，将来却可能是支持的，所以这方面不好说谁更好。在比如性能方面，
同样要看语言和支持的功能，有些语言 hprose 的性能好于 thrift，而有些语言可能 thrift 更好。所以，如果看中性能，
在选择时根据自己所使用的语言来亲测一下比较靠谱。还有就是接口是否严格一致更好的问题。比如有人认为向 thrift 
这种基于代码生成的严格一致的接口更好，原因是在调用时，接口要求什么就传什么就行了。但也有人认为这种严格一致
的接口不好，原因就更多了，比如这种严格一致会给接口升级带来麻烦，使用上不够灵活，生成的代码丑陋，服务代码的
本地可复用性差等等，而且像 hprose 这样的非严格一致的接口要做到严格一致也是可以的，只是不是必须要求的，但是
要让 thrift 这种严格一致的接口做到非严格一致则很困难。所以，从这个角度来说，hprose 这种非严格一致的就更好。
所以，这是一个看问题角度的问题，从不同角度看，可能就会得出不一样的结论，所以哪个更好这里也不做定论。从对序
列化的支持情况来看，thrift 支持多种序列化方式，但是不管换成哪种序列化方式，都是只能 thrift 服务器和 thrift 
客户端之间通讯，所以这种支持多种不同的序列化方式并没有太多实际意义。而 hprose 仅支持一种 hprose 序列化方式，
但是它提供了通过 Filter 进行协议转换的能力，而且还为某些语言提供了现成的 JSON-RPC 的 Filter，通过这种协议转换，
hprose 的服务可以同时发布为 JSON-RPC 服务，hprose 的客户端也可以变身为 JSON-RPC 的客户端，所以这就提供了跨协议
通讯的能力。这种实用性比在同一种协议下支持不同的序列化方式更实用。从更细节的方面来说，hprose 除了提供了基本的 
RPC 通讯能力以外，还提供了很多细节方面的优化。比如 hprose 的客户端是线程安全且内置连接池的，所以只需要一个客户端，
就可以进行多线程并发调用，而 thrift 客户端则不具有这个能力，需要自己来做这方面的封装。再比如 hprose 2.0 客户端还
提供了负载均衡，故障切换，自动重试，订阅推送等等功能，而 thrift 则没有这些功能。细节方面的东西有很多，
这里就不一一列举了。